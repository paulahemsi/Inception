version: '3'

services:
    mariadb:
        build: ./requirements/mariadb # where to find the Dockerfile
        image: mariadb
        container_name: mariadb
        restart: unless-stopped # restart unless it is stopped manually
        env_file:
            - .env
        environment:
            - MYSQL_DATABASE=wordpress # non-sensitive information
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        #volume created and the path inside the container to bind it
        volumes:
            - dbdata:/var/lib/mysql
        networks:
            - 42-network
    
    wordpress:
        depends_on:
            - mariadb # ensures that our containers will start in order of dependency
        build: ./requirements/wordpress
        image: wordpress
        container_name: wordpress
        restart: unless-stopped
        env_file:
            - .env
        environment:
            - MYSQL_HOST=mariadb:3306
            - MYSQL_DATABASE=wordpress
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        volumes:
            - wordpress:/var/www/phemsi-a/wordpress
        networks:
            - 42-network

    nginx:
        depends_on:
            - wordpress
        build: ./requirements/nginx
        image: nginx
        container_name: nginx
        restart: unless-stopped
        ports:
            - "443:443"
        env_file:
            - .env
        environment:
            - DOMAIN_NAME=${DOMAIN_NAME}
            - CERTS_=${CERTS_}
            - CERT_KEY_=${CERT_KEY_}
        volumes:
            - wordpress:/var/www/phemsi-a/wordpress
        networks:
            - 42-network

# When Docker creates volumes, the contents of the volume 
# are stored in a directory on the host filesystem, /var/lib/docker/volumes/, that’s managed by Docker. 
# The contents of each volume then get mounted from this directory to any container that uses the volume. 
# In this way, it’s possible to share code and data between containers.
volumes:
    wordpress:
        # using external volume created in custom directory
        external: true
    dbdata:
        external: true

# enables communication between our containers since they are on the same Docker daemon host. 
# This streamlines traffic and communication within the application, as it opens all ports between
# containers on the same bridge network without exposing any ports to the outside world.
networks:
    42-network:
        driver: bridge
